name: Build and Push (multi-arch)

inputs:
  image_name:
    description: 'The name of the image (for example "aica-technology/image-name")'
    required: true
    type: string
  image_tags:
    description: 'The tag(s) of the image as comma-separated list (for example "latest,devel")'
    required: true
    type: string
  platforms:
    description: 'The desired build platform(s) as comma-separated list (for example "linux/amd64,linux/arm64")'
    required: true
    type: string
  build_context_path:
    description: "Path to the directory that specifies the Docker build context"
    required: false
    type: string
    default: "."
  dockerfile_path:
    description: "Path of the Dockerfile"
    required: false
    type: string
    default: "Dockerfile"
  build_flags:
    description: "Any build flags that should be forwarded to the build process as an array"
    required: false
    type: string
  artifact_name:
    description: "Name of the artifact to be downloaded"
    required: false
    type: string
  artifact_path:
    description: "Path where the artifact should be downloaded to"
    required: false
    type: string
  checkout_ref:
    description: "The reference for the repository checkout"
    required: false
    type: string

secrets:
  token:
    description: "The GitHub token passed from the caller workflow"
    required: true

outputs:
  image_hash:
    description: "The SHA of the pushed image"
    value: ${{ steps.build-push.outputs.sha }}

runs:
  using: composite
  steps:
    - name: Checkout repository with ref
      if: inputs.checkout_ref != ''
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout_ref }}

    - name: Checkout repository
      if: inputs.checkout_ref == ''
      uses: actions/checkout@v3

    - name: Download artifact
      if: inputs.artifact_name
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.artifact_path }}

    - name: Set up QEMU
      if: inputs.platforms != 'linux/amd64'
      uses: docker/setup-qemu-action@v2
      with:
        platforms: ${{ inputs.platforms }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Package Registry
      run: echo "${{ secrets.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      shell: bash

    - id: build-push
      name: Build and push image
      run: |
        IMAGES=()
        IMAGE=${{ inputs.image_name }}
        if [[ "${IMAGE:0:8}" != "ghcr.io/" ]]; then
          IMAGE=ghcr.io/${IMAGE}
        fi
        IFS=',' read -ra TAGS <<< ${{ inputs.image_tags }}
        for TAG in "${TAGS[@]}"
        do
          IMAGES+=(-t ${IMAGE}:${TAG})
        done
        docker buildx build --file ${{ inputs.dockerfile_path }} \
          --platform=${{ inputs.platforms }} ${{ inputs.build_flags }} \
          --push --provenance=false --sbom=false ${IMAGES[@]} \
          ${{ inputs.build_context_path }}
        SHA=$(docker buildx imagetools inspect ${IMAGE}:${TAG} | grep Digest)
        echo "sha=${SHA##*sha256:}" >> $GITHUB_OUTPUT
      shell: bash
