name: Check CHANGELOG update and run tests

on:
  workflow_call:
    inputs:
      package_path:
        description: 'The path to the package containing the CHANGELOG.md (for example "./source/package")'
        required: true
        type: string
      test_stage_name:
        description: "The name of the test stage in the Dockerfile"
        required: false
        type: string
        default: "test"
      build_context_path:
        description: "Path to the directory that specifies the Docker build context"
        required: false
        type: string
        default: "."
      dockerfile_path:
        description: "Path of the Dockerfile"
        required: false
        type: string
        default: "Dockerfile"


jobs:
  check-changelog:
    name: Check if changelog has been updated
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          PACKAGE_PATH=${{ inputs.package_path }}
          git fetch origin main ${{ github.event.pull_request.base.sha }}
          PACKAGE_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} -- "${PACKAGE_PATH}")
          CL_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} -- "${PACKAGE_PATH}/CHANGELOG.md")
          if [ "${PACKAGE_DIFF}" ] && ! [ "${CL_DIFF}" ]; then
            echo "::error file="${PACKAGE_PATH}/CHANGELOG.md",title=Check failed::CHANGELOG.md must be updated!"
            exit 1
          fi
        shell: bash

  check-skippable-changes:
    name: Check skippable changes
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.should_skip }}
    steps:
      - id: check
        uses: fkirc/skip-duplicate-actions@master
        with:
          paths_ignore: '["**.md", ".**/**", "**.gitignore", "**.sh"]'

  test:
    needs: check-skippable-changes
    if: ${{ needs.check-skippable-changes.outputs.skip != 'true' }}
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Test
        run: |
          docker build --target ${{ inputs.test_stage_name }} -f ${{ inputs.dockerfile_path }} ${{ inputs.build_context_path }}
        shell: bash
